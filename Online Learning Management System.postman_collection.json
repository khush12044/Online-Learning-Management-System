{
	"info": {
		"_postman_id": "cffe4e57-05da-431f-9e6d-bdee53dd879b",
		"name": "Online Learning Management System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13046684"
	},
	"item": [
		{
			"name": "API Gateway",
			"item": [
				{
					"name": "Student Service",
					"item": [
						{
							"name": "Creating a Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 409', function () {",
											"    pm.expect(pm.response.code).to.equal(409);",
											"})",
											"",
											"pm.test('Response has the required fields - errorCode and errorMessage', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.errorCode).to.exist;",
											"    pm.expect(responseData.errorMessage).to.exist;",
											"})",
											"",
											"pm.test('errorMessage is a non-empty array', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.errorMessage).to.be.an('array').and.to.have.lengthOf.at.least(1, 'errorMessage should not be empty');",
											"})",
											"",
											"pm.test('errorCode is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.errorCode).to.be.a('string').and.to.have.lengthOf.at.least(1, 'errorCode should not be empty');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Girish\",\r\n    \"lastName\": \"M K\",\r\n    \"emailId\": \"girishmk1234@gmail.com\",\r\n    \"contactNo\": \"7815957484\",\r\n    \"mentorId\": \"e34395fd-8e66-4ab7-be23-717230903ad9\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}/students",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"    pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Response has an errorCode field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.errorCode).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Response has an errorMessage field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errorMessage).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"errorCode is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.errorCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"errorCode should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"errorMessage is an array\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.errorMessage).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/students/adce3e37-1b3e-4d55-9fa3-d544db25dc32",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"students",
										"adce3e37-1b3e-4d55-9fa3-d544db25dc32"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all students",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"EmailId is in a valid email format\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function(student) {",
											"        pm.expect(student.emailId).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"contactNo is a valid phone number format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Array should not be empty\");",
											"    ",
											"    responseData.forEach(function(student) {",
											"        pm.expect(student.contactNo).to.exist.and.to.match(/^\\d{10}$/);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/students",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get student by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"firstName is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"lastName is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"lastName should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"EmailId is in a valid email format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.emailId).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/students/1b5654b7-2fab-4990-a253-1cb071872793",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"students",
										"1b5654b7-2fab-4990-a253-1cb071872793"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('responseCode');",
											"    pm.expect(responseData).to.have.property('responseMessage');",
											"});",
											"",
											"",
											"pm.test(\"responseCode is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.responseCode).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"responseMessage is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.responseMessage).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response time is within an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Adam\",\r\n    \"lastName\": \"Sanadi\",\r\n    \"emailId\": \"adamsanadi6@gmail.com\",\r\n    \"contactNo\": \"9875195329\",\r\n    \"mentorId\": \"0ac8f3f2-fe03-4e93-b5e3-ed4e4c44a8ae\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}/students/1b5654b7-2fab-4990-a253-1cb071872793",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"students",
										"1b5654b7-2fab-4990-a253-1cb071872793"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all students by mentor Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Mentor name is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.mentorName).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"EmailId is in a valid email format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.emailId).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"});",
											"",
											"",
											"pm.test(\"Contact number is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.contactNo).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Designation is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.designation).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/students/mentors/e34395fd-8e66-4ab7-be23-717230903ad9",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"students",
										"mentors",
										"e34395fd-8e66-4ab7-be23-717230903ad9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update students by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.responseCode).to.exist.and.to.be.a('string');",
											"  pm.expect(responseData.responseMessage).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Response code is not empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.responseCode).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Verify responseMessage is not empty\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.responseMessage).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/students/mentors/12f00760-d63c-48e0-9739-589ecabb6e05",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"students",
										"mentors",
										"12f00760-d63c-48e0-9739-589ecabb6e05"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Students by ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test('Response body is an array', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"})",
											"",
											"pm.test('EmailId is in a valid email format', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function (student) {",
											"        pm.expect(student.emailId).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"    });",
											"})",
											"",
											"pm.test('Contact number is a valid phone number format', function () {",
											"    const responseData = pm.response.json();",
											"    responseData.forEach(function (student) {",
											"        pm.expect(student.contactNo).to.match(/[6-9][0-9]{9}/);",
											"    });",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    \"b54c5166-d94f-484f-9748-0a361726ce3b\",\r\n    \"1b5654b7-2fab-4990-a253-1cb071872793\",\r\n    \"0ac8f3f2-fe03-4e93-b5e3-ed4e4c44a8ae\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}/students/ids",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"students",
										"ids"
									]
								}
							},
							"response": []
						},
						{
							"name": "get courses enrolled by student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 500', function () {",
											"    pm.expect(pm.response.code).to.equal(500);",
											"})",
											"",
											"pm.test('Response has the required fields', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('timestamp', 'status', 'error', 'trace', 'message', 'path');",
											"})",
											"",
											"pm.test('Error message is not empty', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
											"})",
											"",
											"pm.test('Path should not be empty', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.path).to.exist.and.to.not.be.empty;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/students/courses/baf7a5cc-7d01-431c-8c4e-086ea64ef822",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"students",
										"courses",
										"baf7a5cc-7d01-431c-8c4e-086ea64ef822"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mentor Service",
					"item": [
						{
							"name": "Add a Mentor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 409\", function () {",
											"  pm.response.to.have.status(409);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.errorCode).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.errorMessages).to.exist.and.to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"errorCode is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errorCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"errorMessages is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errorMessages).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mentorName\": \"Akash M K\",\r\n    \"emailId\": \"akashmk1234@gmail.com\",\r\n    \"contactNo\": \"8754215968\",\r\n    \"designation\": \"Assistant Professor\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}/mentors",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"mentors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'status' field is present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.status).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"The 'components' object should be present in the response\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.components).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Validate presence of clientConfigServer object\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.components).to.be.an('object');",
											"  pm.expect(responseData.components.clientConfigServer).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Validate the 'db' object is present in the 'components' object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.components).to.be.an('object');",
											"    pm.expect(responseData.components.db).to.exist;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8083/actuator/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8083",
									"path": [
										"actuator",
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get mentor by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"    pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Response has an errorCode field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.errorCode).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Test that errorCode field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.errorCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Response has an 'errorMessages' field\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.errorMessages).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"errorMessages field is an array\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.errorMessages).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/mentors/3766aadf-b55f-45b1-9d0b-61304007cc68",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"mentors",
										"3766aadf-b55f-45b1-9d0b-61304007cc68"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all mentors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"mentorName is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.forEach(function (mentor) {",
											"        pm.expect(mentor.mentorName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"mentorName should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"EmailId is in a valid email format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
											"    ",
											"    responseData.forEach(function (mentor) {",
											"        pm.expect(mentor.emailId).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"EmailId is not in a valid email format\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"The contactNo should be a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function (mentor) {",
											"        pm.expect(mentor.contactNo).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/mentors",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"mentors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete mentor by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"    pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields - errorCode and errorMessages\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('errorCode');",
											"    pm.expect(responseData).to.have.property('errorMessages');",
											"});",
											"",
											"",
											"pm.test(\"errorCode is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.errorCode).to.be.a('string').and.to.have.length.above(0, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"errorMessages is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.errorMessages).to.be.an('array');",
											"    pm.expect(responseData.errorMessages).to.have.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/mentors/12f00760-d63c-48e0-9739-589ecabb6e05",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"mentors",
										"12f00760-d63c-48e0-9739-589ecabb6e05"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a mentor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {",
											"  pm.expect(pm.response.code).to.equal(404);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields - errorCode and errorMessages\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.errorCode).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.errorMessages).to.exist.and.to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"errorCode is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.errorCode).to.be.a('string').and.to.have.lengthOf.at.least(1, \"errorCode should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"errorMessages is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.errorMessages).to.be.an('array').that.has.lengthOf.at.least(1);",
											"});",
											"",
											"",
											"pm.test(\"Response time is in an acceptable range\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mentorName\": \"Akash M K\",\r\n    \"emailId\": \"akashmk1234@gmail.com\",\r\n    \"contactNo\": \"8754215968\",\r\n    \"designation\": \"Associate Professor\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}/mentors/12f00760-d63c-48e0-9739-589ecabb6e05",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"mentors",
										"12f00760-d63c-48e0-9739-589ecabb6e05"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all mentors by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response is an array with at least one element\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    pm.expect(responseData).to.have.length.above(0, \"Array should have at least one element\");",
											"});",
											"",
											"",
											"pm.test(\"mentorId is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    ",
											"    responseData.forEach(function (mentor) {",
											"        pm.expect(mentor.mentorId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"mentorId should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"mentorName is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"    responseData.forEach(function (mentor) {",
											"        pm.expect(mentor.mentorName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"mentorName should be a non-empty string\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"EmailId is in a valid email format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"    ",
											"    responseData.forEach(function (mentor) {",
											"        pm.expect(mentor.emailId).to.exist.and.to.match(/\\S+@\\S+\\.\\S+/);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/mentors/ids?mentorIds=12f00760-d63c-48e0-9739-589ecabb6e05,eae4d3f8-6a27-4f58-a807-4d18f9dc6dfe",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"mentors",
										"ids"
									],
									"query": [
										{
											"key": "mentorIds",
											"value": "12f00760-d63c-48e0-9739-589ecabb6e05,eae4d3f8-6a27-4f58-a807-4d18f9dc6dfe"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course Service",
					"item": [
						{
							"name": "Creation of course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 503', function () {",
											"    pm.expect(pm.response.code).to.equal(503);",
											"})",
											"",
											"pm.test('Response has the required fields', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.timestamp).to.exist;",
											"    pm.expect(responseData.path).to.exist;",
											"    pm.expect(responseData.status).to.exist;",
											"    pm.expect(responseData.error).to.exist;",
											"    pm.expect(responseData.requestId).to.exist;",
											"})",
											"",
											"pm.test('Path is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.path).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
											"})",
											"",
											"pm.test('requestId is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.requestId).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"GitHub\",\r\n    \"credits\" : 5,\r\n    \"mentorId\" : \"eae4d3f8-6a27-4f58-a807-4d18f9dc6dfe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}/courses",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Student to a Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 503', function () {",
											"    pm.expect(pm.response.code).to.equal(503);",
											"})",
											"",
											"pm.test('Response has the required fields', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.path).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.requestId).to.exist.and.to.be.a('string');",
											"})",
											"",
											"pm.test('Path is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
											"})",
											"",
											"pm.test('requestId is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.requestId).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/courses-students/courses/f4c77ecb-8d76-48b6-9c5f-0850a4e2ac3b/students/b54c5166-d94f-484f-9748-0a361726ce3b",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"courses-students",
										"courses",
										"f4c77ecb-8d76-48b6-9c5f-0850a4e2ac3b",
										"students",
										"b54c5166-d94f-484f-9748-0a361726ce3b"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update course by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 503\", function () {",
											"    pm.expect(pm.response.code).to.equal(503);",
											"});",
											"",
											"",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.path).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.requestId).to.exist.and.to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"Timestamp is in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Timestamp is not in a valid date format\");",
											"});",
											"",
											"",
											"pm.test(\"Path is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Error is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.error).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Java Core Basics\",\r\n    \"credits\" : 5,\r\n    \"mentorId\" : \"e34395fd-8e66-4ab7-be23-717230903ad9\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}/courses/baf7a5cc-7d01-431c-8c4e-086ea64ef821",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"courses",
										"baf7a5cc-7d01-431c-8c4e-086ea64ef821"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get course by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 503', function () {",
											"    pm.expect(pm.response.code).to.equal(503);",
											"})",
											"",
											"pm.test('Response has the required fields', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.path).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.requestId).to.exist.and.to.be.a('string');",
											"})",
											"",
											"pm.test('Path is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
											"})",
											"",
											"pm.test('requestId is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.requestId).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/courses/baf7a5cc-7d01-431c-8c4e-086ea64ef822",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"courses",
										"baf7a5cc-7d01-431c-8c4e-086ea64ef822"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 503', function () {",
											"    pm.expect(pm.response.code).to.equal(503);",
											"})",
											"",
											"pm.test('Response has the required fields', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.path).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.requestId).to.exist.and.to.be.a('string');",
											"})",
											"",
											"pm.test('Path is not empty', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.path).to.exist.and.to.not.be.empty;",
											"})",
											"",
											"pm.test('Error field is not empty', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.error).to.exist.and.to.not.be.empty;",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/courses?name=",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "name",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get courses by student Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 503', function () {",
											"    pm.expect(pm.response.code).to.equal(503);",
											"})",
											"",
											"pm.test('Path is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.path).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
											"})",
											"",
											"pm.test('requestId is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.requestId).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_Url}}/courses/info/baf7a5cc-7d01-431c-8c4e-086ea64ef822",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"courses",
										"info",
										"baf7a5cc-7d01-431c-8c4e-086ea64ef822"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the credits",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 503', function () {",
											"    pm.expect(pm.response.code).to.equal(503);",
											"})",
											"",
											"pm.test('Response has the required fields', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.timestamp).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.path).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.status).to.exist.and.to.be.a('number');",
											"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.requestId).to.exist.and.to.be.a('string');",
											"})",
											"",
											"pm.test('Path is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.path).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
											"})",
											"",
											"pm.test('requestId is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.requestId).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"studentId\" : \"dd544873-f854-4ca7-bf57-fb3b829b3f91\",\r\n    \"courseId\" : \"baf7a5cc-7d01-431c-8c4e-086ea64ef822\",\r\n    \"awardedCredits\" : \"7\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_Url}}/courses-students",
									"host": [
										"{{base_Url}}"
									],
									"path": [
										"courses-students"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_Url",
			"value": "http://localhost:8081"
		}
	]
}